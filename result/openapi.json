{"openapi":"3.1.0","info":{"title":"FLAME Node Result Service","summary":"Service for handling intermediate files and submitting result files to the FLAME Hub.","description":"The FLAME Node Result Service is responsible for handling result files for federated analyses within FLAME.\nIt uses a local object storage to store intermediate files, as well as to enqueue files for upload to the FLAME Hub.\n\n# Setup\n\nYou will need access to a MinIO instance and an identification provider that offers a JWKS endpoint for the access\ntokens it issues.\n\nFor manual installation, you will need Python 3.10 or higher and [Poetry](https://python-poetry.org/) installed.\nClone the repository and run `poetry install` in the root directory.\nCreate a copy of `.env.example`, name it `.env` and configure to your needs.\nFinally, use the command line tool `flame-result` to start the service.\n\n```\n$ git clone https://github.com/PrivateAIM/node-result-service.git\n$ cd node-result-service\n$ poetry install\n$ cp .env.example .env\n$ poetry shell\n$ flame-result server\n```\n\nAlternatively, if you're using\nDocker, [pull a recent image from the GitHub container registry](https://github.com/PrivateAIM/node-result-service/pkgs/container/node-result-service).\nPass in the configuration options using `-e` flags and forward port 8080 from your host to the container.\n\n```\n$ docker run --rm -p 8080:8080 -e HUB__AUTH_USERNAME=admin \\\n    -e HUB__AUTH_PASSWORD=super_secret \\\n    -e MINIO__ENDPOINT=localhost:9000 \\\n    -e MINIO__ACCESS_KEY=admin \\\n    -e MINIO__SECRET_KEY=super_secret \\\n    -e MINIO__BUCKET=flame \\\n    -e MINIO__USE_SSL=false \\\n    -e OIDC__CERTS_URL=\"http://my.idp.org/realms/flame/protocol/openid-connect/certs\" \\\n    ghcr.io/privateaim/node-result-service:sha-c1970cf\n```\n\n# Configuration\n\nThe following table shows all available configuration options.\n\n| **Environment variable**   | **Description**                                          | **Default**                 | **Required** |\n|----------------------------|----------------------------------------------------------|-----------------------------|:------------:|\n| HUB__API_BASE_URL          | Base URL for the FLAME Hub API                           | https://api.privateaim.net  |              |\n| HUB__AUTH_BASE_URL         | Base URL for the FLAME Auth API                          | https://auth.privateaim.net |              |\n| HUB__AUTH_USERNAME         | Username to use for obtaining access tokens              |                             |      x       |\n| HUB__AUTH_PASSWORD         | Password to use for obtaining access tokens              |                             |      x       |\n| MINIO__ENDPOINT            | MinIO S3 API endpoint (without scheme)                   |                             |      x       |\n| MINIO__ACCESS_KEY          | Access key for interacting with MinIO S3 API             |                             |      x       |\n| MINIO__SECRET_KEY          | Secret key for interacting with MinIO S3 API             |                             |      x       |\n| MINIO__BUCKET              | Name of S3 bucket to store result files in               |                             |      x       |\n| MINIO__REGION              | Region of S3 bucket to store result files in             | us-east-1                   |              |\n| MINIO__USE_SSL             | Flag for en-/disabling encrypted traffic to MinIO S3 API | 0                           |              |\n| OIDC__CERTS_URL            | URL to OIDC-complaint JWKS endpoint for validating JWTs  |                             |      x       |\n| OIDC__CLIENT_ID_CLAIM_NAME | JWT claim to identify authenticated requests with        | client_id                   |              |\n\n## Note on running tests\n\nWhen running tests, environment variables must be overwritten by prefixing them with `PYTEST__`.\nOIDC does not need to be configured, since an OIDC-compatible endpoint will be spawned alongside the tests that are\nbeing run.\nA [pre-generated keypair](tests/assets/keypair.pem) is used for this purpose.\nThis allows all tests to generate valid JWTs as well as the service to validate them.\nThe keypair is for development purposes only and should not be used in a productive setting.\nTherefore `pytest` should be invoked as follows.\n\n```\n$ PYTEST__MINIO__ENDPOINT=\"localhost:9000\" \\\n    PYTEST__MINIO__ACCESS_KEY=\"admin\" \\\n    PYTEST__MINIO__SECRET_KEY=\"s3cr3t_p4ssw0rd\" \\\n    PYTEST__MINIO__BUCKET=\"flame\" \\\n    PYTEST__HUB__AUTH_USERNAME=\"XXXXXXXX\" \\\n    PYTEST__HUB__AUTH_PASSWORD=\"XXXXXXXX\" pytest\n```\n\nSome tests need to be run against live infrastructure.\nSince a proper test instance is not available yet, these tests are hidden behind a flag and are not explicitly run in\nCI.\nTo run these tests, append `-m live` to the command above.\n\n# License\n\nThe FLAME Node Result Service is released under the Apache 2.0 license.\n","license":{"name":"Apache 2.0","identifier":"Apache-2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.html"},"version":"0.1.0"},"paths":{"/healthz":{"get":{"summary":"Check service readiness","description":"Check whether the service is ready to process requests. Responds with a 200 on success.","operationId":"getHealth","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/upload/":{"put":{"tags":["upload"],"summary":"Upload file to submit to Hub","description":"Upload a file to the local S3 instance and send it to FLAME Hub in the background.\nThe request is successful if the file was uploaded to the local S3 instance.\nResponds with a 204 on success.\n\nThis endpoint is to be used for submitting final results of a federated analysis.\n\nCurrently, there is no way of determining the status or progress of the upload to the FLAME Hub.","operationId":"putResultFile","requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_putResultFile"}}},"required":true},"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"HTTPBearer":[]}]}},"/scratch/":{"put":{"tags":["scratch"],"summary":"Upload file to local object storage","description":"Upload a file to the local S3 instance.\nThe file is not forwarded to the FLAME hub.\nResponds with a 200 on success and a link to the endpoint for fetching the uploaded file.\n\nThis endpoint is to be used for submitting intermediate results of a federated analysis.","operationId":"putIntermediateFile","requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_putIntermediateFile"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ScratchUploadResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"HTTPBearer":[]}]}},"/scratch/{object_id}":{"get":{"tags":["scratch"],"summary":"Get file from local object storage","description":"Get a file from the local S3 instance.\nThe file must have previously been uploaded using the PUT method of this endpoint.\nResponds with a 200 on success and the requested file in the response body.\n\nThis endpoint is to be used for retrieving intermediate results of a federated analysis.","operationId":"getIntermediateFile","security":[{"HTTPBearer":[]}],"parameters":[{"name":"object_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Object Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}}},"components":{"schemas":{"Body_putIntermediateFile":{"properties":{"file":{"type":"string","format":"binary","title":"File"}},"type":"object","required":["file"],"title":"Body_putIntermediateFile"},"Body_putResultFile":{"properties":{"file":{"type":"string","format":"binary","title":"File"}},"type":"object","required":["file"],"title":"Body_putResultFile"},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"ScratchUploadResponse":{"properties":{"url":{"type":"string","maxLength":2083,"minLength":1,"format":"uri","title":"Url"}},"type":"object","required":["url"],"title":"ScratchUploadResponse"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}},"securitySchemes":{"HTTPBearer":{"type":"http","scheme":"bearer"}}},"tags":[{"name":"upload","description":"Upload files for submission to FLAME hub"},{"name":"scratch","description":"Upload files to local object storage"}]}